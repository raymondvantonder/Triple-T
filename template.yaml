AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Parameters:
  StageName:
    Type: String
    Default: default
  TableName:
    Type: String
    Default: defaultTable
  TopicName:
    Type: String
    Default: defaultTopic
  JwtSecretKey:
    Type: String
    Default: defaultSecretKey

Globals:
  Function:
    Timeout: 10

Resources:
  TripleTDatabase:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref TableName
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 2
            WriteCapacityUnits: 2
        - IndexName: GSI2
          KeySchema:
            - AttributeName: GSI2PK
              KeyType: HASH
            - AttributeName: GSI2SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 2
            WriteCapacityUnits: 2
  TripleTApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: !Ref StageName
      CorsConfiguration:
        AllowMethods:
          - GET
          - POST
          - OPTIONS
          - PUT
          - DELETE
        AllowOrigins:
          - "https://www.tripletconsulting.site"
        AllowHeaders: 
          - "Content-Type"
          - "Access-Control-Allow-Origin"
          - "Accept"
          - "Authorization"
  TripleTEmailingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./Source/TripleT.Emailing.Lambda/
      Handler: app.handler
      Runtime: nodejs14.x
      FunctionName: !Sub "TripleTEmailingFunction${StageName}"
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'ses:SendTemplatedEmail'
              Resource: '*'
      Architectures:
        - x86_64
      MemorySize: 128
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref EmailingTopic
  TripleTUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./Source/TripleT.User.Lambda/TripleT.User.Lambda/
      Handler: TripleT.User.Lambda
      Runtime: dotnet6
      FunctionName: !Sub "TripleTUserFunction${StageName}"
      Policies: 
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt EmailingTopic.TopicName
      Architectures:
        - x86_64
      MemorySize: 256
      Environment:
        Variables:
          ASPNETCORE_ENVIRONMENT: !Ref StageName
          DYNAMODB_TABLE_NAME: !Ref TableName
          SNS_TOPIC_ARN: !Ref EmailingTopic
          JWT_TOKEN_EXPIRATION_SECONDS: 3600
          JWT_TOKEN_SECRET: !Ref JwtSecretKey
          PASSWORD_RESET_URL: http://localhost:44315/user/reset-password
          EMAIL_VERIFICATION_URL: http://localhost:44315/user/verify-email
          MAILING_ENABLED: true
      Events:
        ProxyResource:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            ApiId: !Ref TripleTApi
            Path: /{proxy+}
            Method: ANY
        RootResource:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            ApiId: !Ref TripleTApi
            Path: /
            Method: ANY
  EmailingTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Ref TopicName

Outputs:
  TripleTUserFunction:
    Description: "TripleTUserFunction ARN"
    Value: !GetAtt TripleTUserFunction.Arn

  EmailingTopic:
    Description: "EmailingTopic ARN"
    Value: !Ref EmailingTopic

  TripleTApi:
    Description: "TripleTApi Endpoint"
    Value: !Sub 'https://${TripleTApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${StageName}/'
